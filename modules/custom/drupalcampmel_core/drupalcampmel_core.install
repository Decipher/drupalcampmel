<?php
/**
 * @file
 * Installation functions for DrupalCampMelbourne: Core feature.
 */

/**
 * Implements hook_install().
 */
function drupalcampmel_core_install() {
  // Configure Node limit modules.
  drupalcampmel_core_install_node_limit();

  // Create the 'Creating a session' bean.
  drupalcampmel_core_install_create_session_bean();

  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();

  // Create the Ticket products.
  drupalcampmel_core_install_add_tickets();

  // Disable unused rules.
  drupalcampmel_core_install_disable_rules();
}

/**
 * Configure Node limit modules.
 */
function drupalcampmel_core_install_node_limit() {
  db_insert('node_limit')->fields(array(
    'lid'    => 1,
    'nlimit' => 1,
    'title'  => 'Session limit',
    'weight' => 0,
  ))->execute();
  db_insert('node_limit_type')->fields(array(
    'lid'  => 1,
    'type' => 'session',
  ))->execute();
  db_insert('node_limit_userofrole')->fields(array(
    'lid' => 1,
    'rid' => 2,
  ))->execute();
}

/**
 * Create the 'Creating a session' bean.
 */
function drupalcampmel_core_install_create_session_bean() {
  $bean        = bean_create(array('type' => 'misc'));
  $bean->label = 'Creating a session';
  $bean->title = '';
  $bean->delta = 'creating-session';

  $bean->field_body[LANGUAGE_NONE][0] = array(
    'value'  => '<p>Please note that only one session per attendee can be created, but you are free to edit your proposed session as much as needed.</p><p>On the first day of DrupalCampMelbourne all attendees will be encouraged to give a short (1-2 minutes) lightning talk about their proposed session, giving each attendee a chance to both promote their talk and vote on the talks they wish to attend during the day.</p>',
    'format' => 'full_html',
  );

  $bean->field_block_class[LANGUAGE_NONE][0]['value'] = 'panel-info';

  $bean->save();
}

/**
 * Create the Ticket products.
 */
function drupalcampmel_core_install_add_tickets() {
  $products = array(
    '1' => '80',
    '2' => '50',
  );
  foreach ($products as $day => $stock) {
    $product = commerce_product_new('tickets');
    /** @var EntityDrupalWrapper $wrapper */
    $wrapper = entity_metadata_wrapper('commerce_product', $product);

    $wrapper->sku            = "DAY{$day}";
    $wrapper->title          = "Day {$day}";
    $wrapper->commerce_price = array(
      'amount'        => 1000,
      'currency_code' => 'AUD',
      'data'          => array('components' => array())
    );
    $wrapper->commerce_stock = $stock;
    $wrapper->save();
  }
}

/**
 * Disable unused rules.
 */
function drupalcampmel_core_install_disable_rules() {
  $rules = array(
    'commerce_cart_add_to_cart_message',
    'commerce_checkout_new_account',
    'commerce_checkout_order_email',
    'commerce_checkout_order_convert',
    'rules_confirm_order_new_submission',
    'rules_decrement_stock_completing_order',
    'rules_poll_new_submission',
    'rules_signup_create_notify_user_trigger',
  );
  foreach ($rules as $rule) {
    $rule         = rules_config_load($rule);
    $rule->active = FALSE;
    $rule->save();
  }
}

/**
 * Implements hook_persistent_update().
 */
function drupalcampmel_core_persistent_update() {
  // Flush caches and revert features.
  _drupalcampmel_core_flush_revert();
}

/**
 * Helper function; Enable dependencies, flush caches and revert the feature.
 */
function _drupalcampmel_core_flush_revert() {
  if (empty($modules)) {
    $modules = basename(__FILE__, '.install');
  }
  if (!is_array($modules)) {
    $modules = array($modules);
  }

  $revert = array();
  foreach ($modules as $module) {
    $info = system_get_info('module', $module);

    // Enable all dependencies.
    module_enable($info['dependencies']);

    // Forcefully clear Features caches.
    module_load_include('inc', 'features', 'features.export');
    foreach (array_keys($info['features']) as $component) {
      if ($component != 'features_api') {
        features_get_components($component, NULL, TRUE);
        features_include_defaults($component, TRUE);
        features_get_default($component, $module, TRUE, TRUE);
      }
    }

    // Revert all feature components except for 'OAuth Connector providers'.
    unset($info['features']['oauthconnector_provider']);

    // Build components list for feature revert.
    $revert[$module] = array_keys($info['features']);
  }

  // Flush Prepro cache.
  cache_clear_all('prepro:map', 'cache_prepro');

  // Flush all standard Drupal caches.
  drupal_flush_all_caches();

  features_revert($revert);
}

/**
 * Enable dependencies, flush caches and revert the feature.
 */
function drupalcampmel_core_update_7101() {
  _drupalcampmel_core_flush_revert();
}

/**
 * Enable dependencies, flush caches and revert the feature, configure Node
 * limit modules, create the 'Creating a session' bean and turn
 * 'register_interest' submissions into users.
 */
function drupalcampmel_core_update_7102() {
  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();

  // Configure Node limit modules.
  drupalcampmel_core_install_node_limit();

  // Create the 'Creating a session' bean.
  drupalcampmel_core_install_create_session_bean();

  // Turn 'register_interest' submissions into users.
  $query  = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'register_interest')
    ->execute();
  if (!empty($result['entityform'])) {
    $entities = entityform_load_multiple(array_keys($result['entityform']));
    foreach ($entities as $entity) {
      rules_invoke_component('rules_signup_create_notify_user', $entity);
    }
  }
}

/**
 * This was used during the great site failed migration workaround.
 */
function drupalcampmel_core_update_7103() {
}

/**
 * Enable dependencies, flush caches and revert the feature.
 */
function drupalcampmel_core_update_7104() {
  _drupalcampmel_core_flush_revert();
}

/**
 * Enable dependencies, flush caches and revert the feature, assign 'ticket
 * holder' role to ticket holders and create the 'Create a session' bean for the
 * session/vote page.
 */
function drupalcampmel_core_update_7105() {
  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();

  // Assign 'ticket holder' role to ticket holders.
  $query   = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'confirm_order')
    ->execute();

  if (!empty($results['entityform'])) {
    $entityforms = entityform_load_multiple(array_keys($results['entityform']));
    foreach ($entityforms as $entityform) {
      $user           = user_load($entityform->uid);
      $user->roles[3] = 'ticket holder';
      user_save($user);
    }
  }

  // Create the 'Create a session' bean for the session/vote page.
  drupalcampmel_core_install_creating_a_session_bean();
}

/**
 * Create the 'Create a session' bean for the
 */
function drupalcampmel_core_install_creating_a_session_bean() {
  $bean        = bean_create(array('type' => 'misc'));
  $bean->label = 'Create a session';
  $bean->title = '';
  $bean->delta = 'creating-a-session';

  $bean->field_body[LANGUAGE_NONE][0] = array(
    'value'  => '<p>Todo<div><br><a href="/node/add/session"><button type="button" class="btn btn-default">Create a session</button></a></div></p>',
    'format' => 'full_html',
  );

  $bean->field_block_class[LANGUAGE_NONE][0]['value'] = 'panel-info';

  $bean->save();
}

/**
 * Delete un-used summary field, ypdate text for 'create a session' bean, enable
 * dependencies, flush caches and revert the feature.
 */
function drupalcampmel_core_update_7106() {
  // Delete un-used summary field.
  field_delete_field('field_summary');

  // Update text for 'create a session' bean.
  $bean                               = bean_load_delta('creating-a-session');
  $bean->field_body[LANGUAGE_NONE][0] = array(
    'value'  => '<p>You haven\'t created a session yet, but it\'s not too late; We strongly encourage everyone to propose a talk, everyone has something worth saying and worth hearing!</p><div><br><a href="/node/add/session"><button type="button" class="btn btn-default">Create a session</button></a></div>',
    'format' => 'full_html',
  );
  $bean->save();

  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();
}

/**
 * Enable the Persistent Update module.
 */
function drupalcampmel_core_update_7107() {
  module_enable(array('persistent_update'));
  drupalcampmel_core_persistent_update();
}

/**
 * Disable and uninstall deprecated modules.
 */
function drupalcampmel_core_update_7108() {
  $modules = array(
    'panels_bootstrap_layout_builder',
    'panels_bootstrap_styles',
    'panels_ipe'
  );
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

/**
 * Create the Ticket products and disable unused rules.
 */
function drupalcampmel_core_update_7109() {
  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();

  // Create the Ticket products.
  drupalcampmel_core_install_add_tickets();

  // Disable unused rules.
  drupalcampmel_core_install_disable_rules();
}
